(function(){var e={289:function(){let{Mixin:e}=Shopware,{Criteria:t}=Shopware.Data;Shopware.Component.register("product-bundle-create",{template,inject:["repositoryFactory"],mixins:[e.getByName("listing")],data(){return{productBundleRepository:this.repositoryFactory.create("product_bundle"),productBundle:null,languageId:Shopware.State.get("context").api.languageId,availableProducts:[],selectedProducts:[],columns:[{property:"name",label:this.$tc("sw-product-bundle.create.productColumnName"),align:"left"},{property:"quantity",label:this.$tc("sw-product-bundle.create.productColumnQuantity"),align:"center"},{property:"actions",label:this.$tc("sw-product-bundle.create.actionsColumn"),align:"center"}],isLoading:!1,saveDisabled:!1,productBundleNameError:null}},computed:{saveDisabled(){return!this.productBundle||this.isLoading||!this.selectedProducts.length}},methods:{async createNewBundle(){this.isLoading=!0;try{this.productBundle=this.productBundleRepository.create(Shopware.Context.api),this.productBundle.translations=this.productBundle.translations||{},this.$set(this.productBundle.translations,this.languageId,{name:""}),await this.fetchAvailableProducts()}catch(e){console.error("Error creating bundle:",e)}finally{this.isLoading=!1}},async fetchAvailableProducts(){let e=new t(1,25),n=await this.productBundleRepository.search(e,Shopware.Context.api);this.availableProducts=n},addProductToBundle(e){this.selectedProducts.includes(e)||this.selectedProducts.push(e)},removeProductFromBundle(e){let t=this.selectedProducts.indexOf(e);-1!==t&&this.selectedProducts.splice(t,1)},async saveBundle(){this.isLoading=!0;try{this.productBundle.products=this.selectedProducts.map(e=>({productId:e.id,quantity:1})),await this.productBundleRepository.save(this.productBundle,Shopware.Context.api),this.$router.push({name:"product.bundle.list"})}catch(e){console.error("Error saving bundle:",e)}finally{this.isLoading=!1}},cancel(){this.$router.push({name:"product.bundle.list"})}},created(){this.createNewBundle()}})}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.p="bundles/productbundle/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/productbundle/"),function(){"use strict";Shopware.Component.override("sw-product-detail",{template:'\n{% block sw_product_detail_content_tabs_reviews %}\n\n    {% parent %}\n\n    \n    <sw-tabs-item :route="{ name: \'sw.product.detail.custom\', params: { id: $route.params.id } }" title="Product Bundle">\n        Product Bundle\n    </sw-tabs-item>\n{% endblock %}\n'}),Shopware.Component.register("sw-product-detail-custom",{template:'\n<sw-card title="Custom">\n    Hello world!\n</sw-card>\n',metaInfo(){return{title:"Custom"}}});let{Mixin:e}=Shopware,{Criteria:t}=Shopware.Data;Shopware.Component.register("product-bundle-list",{template:'<sw-page\n    class="sw-generic-custom-entity-list"\n>\n    <template #search-bar>\n        <sw-search-bar\n            key="product_bundle"\n            initial-search-type="product_bundle"\n            :initial-search="term"\n            @search="onSearch"\n        />\n    </template>\n\n    <template #smart-bar-header>\n        <h2 class="sw-generic-custom-entity-list__title">\n            {{ $tc(\'sw-product-bundle.list.textProductBundles\') }}\n\n            <span v-if="!isLoading">\n                ({{ total }})\n            </span>\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button\n            class="sw-generic-custom-entity-list__button-add"\n            :router-link="{ name: \'product.bundle.create\' }"\n            variant="primary"\n        >\n            {{ $tc(\'global.default.add\') }}\n        </sw-button>\n    </template>\n\n    <template #language-switch>\n        <sw-language-switch @on-change="onChangeLanguage" />\n    </template>\n\n    <template #content>\n        <div class="sw-generic-custom-entity-list__content">\n            <sw-entity-listing\n                v-if="!isLoading"\n                class="sw-generic-custom-entity-list__content-list"\n                :repository="productBundleRepository"\n                :items="productBundles"\n                :allow-inline-edit="true"\n                :allow-column-edit="false"\n                :columns="columns"\n                :is-loading="isLoading"\n                :allowEdit="true"\n\n            />\n\n            <sw-empty-state\n                v-else\n                class="sw-generic-custom-entity-list__content-empty-state"\n                :title="emptyStateTitle"\n                :subline="emptyStateSubline"\n            >\n                <template #actions>\n                    <sw-button\n                        @click="onCreate"\n                        variant="primary"\n                    >\n                        {{ $tc(\'sw-product-bundle.list.textCreateProductBundle\') }}\n                    </sw-button>\n                </template>\n            </sw-empty-state>\n        </div>\n    </template>\n</sw-page>\n',inject:["repositoryFactory"],mixins:[e.getByName("listing")],metaInfo(){return{title:this.$createTitle()}},data(){return{productBundleRepository:this.repositoryFactory.create("product_bundle"),productBundles:[],columns:[{property:"name",label:"Product Bundle Name",routerLink:"product.bundle.detail",allowResize:!0}],isLoading:!1,total:0,criteria:new t(1,25),languageId:Shopware.State.get("context").api.languageId,emptyStateTitle:this.$tc("sw-product-bundle.list.emptyStateTitle"),emptyStateSubline:this.$tc("sw-product-bundle.list.emptyStateSubline")}},methods:{async getList(){this.isLoading=!0,this.criteria.addAssociation("translations");try{console.log("Fetching product bundles...");let e=await this.productBundleRepository.search(this.criteria,Shopware.Context.api);console.log("Product bundles fetched:",e),0===e.length&&console.warn("No product bundles found."),this.total=e.total,this.productBundles=e}catch(e){console.error("Error fetching product bundles:",e.response?.data||e.message),this.productBundles=[]}finally{this.isLoading=!1}},onEditItem(e){this.$router.push({name:"product.bundle.detail",params:{id:e.id}})},onCreateNewProductBundle(){this.$router.push({name:"product.bundle.create"})},onSearch(e){this.criteria.setTerm(e),this.getList()}},created(){this.getList()}});let{Mixin:r}=Shopware;Shopware.Component.register("product-bundle-detail",{template:'{% block sw_product_bundle_detail_content %}\n    <div class="product-bundle-detail">\n        <h2>{{ $tc(\'product_bundle.detail.title\') }}</h2>\n\n        <sw-card>\n            <template #title>\n                {{ $tc(\'product_bundle.detail.formTitle\') }}\n            </template>\n            <template #content>\n                <sw-text-field\n                    v-model="productBundle.title"\n                    label="{{ $tc(\'product_bundle.create.label.title\') }}"\n                    :error="saveError ? $tc(\'product_bundle.create.error\') : \'\'"\n                ></sw-text-field>\n            </template>\n        </sw-card>\n\n        <div class="buttons">\n            <sw-button variant="secondary" @click="cancel">\n                {{ $tc(\'global.default.cancel\') }}\n            </sw-button>\n            <sw-button variant="primary" :loading="isLoading" @click="saveProductBundle">\n                {{ $tc(\'global.default.save\') }}\n            </sw-button>\n            <sw-button variant="danger" :loading="isLoading" @click="deleteProductBundle">\n                {{ $tc(\'global.default.delete\') }}\n            </sw-button>\n        </div>\n\n        <div v-if="saveSuccess" class="alert alert-success mt-4">\n            {{ $tc(\'product_bundle.create.success\') }}\n        </div>\n\n        <div v-if="saveError" class="alert alert-danger mt-4">\n            {{ $tc(\'product_bundle.create.error\') }}\n        </div>\n\n        <div v-if="deleteSuccess" class="alert alert-success mt-4">\n            {{ $tc(\'product_bundle.delete.success\') }}\n        </div>\n\n        <div v-if="deleteError" class="alert alert-danger mt-4">\n            {{ $tc(\'product_bundle.delete.error\') }}\n        </div>\n    </div>\n{% endblock %}\n',inject:["repositoryFactory","context"],data(){return{productBundleRepository:this.repositoryFactory.create("product_bundle"),productBundle:null,isLoading:!0,saveError:!1,saveSuccess:!1,deleteError:!1,deleteSuccess:!1}},metaInfo(){return{title:this.$createTitle()}},methods:{async loadProductBundle(){this.isLoading=!0;try{let e=await this.productBundleRepository.get(this.$route.params.id,Shopware.Context.api);this.productBundle=e}catch(e){console.error("Error fetching product bundle:",e.response?.data||e.message),this.productBundle=null}finally{this.isLoading=!1}},async saveProductBundle(){this.isLoading=!0;try{await this.productBundleRepository.save(this.productBundle,Shopware.Context.api)&&(this.saveSuccess=!0,this.$router.push({name:"product.bundle.list"}))}catch(e){console.error("Error saving product bundle:",e.response?.data||e.message),this.saveError=!0}finally{this.isLoading=!1}},async deleteProductBundle(){this.isLoading=!0;try{await this.productBundleRepository.delete(this.productBundle.id,Shopware.Context.api),this.deleteSuccess=!0,this.$router.push({name:"product.bundle.list"})}catch(e){console.error("Error deleting product bundle:",e.response?.data||e.message),this.deleteError=!0}finally{this.isLoading=!1}},cancel(){this.$router.push({name:"product.bundle.list"})}},created(){this.loadProductBundle()}}),n(289);var a=JSON.parse('{"product-bundle":{"general":{"mainMenuItemGeneral":"My custom module","descriptionTextModule":"Manage this custom module here"}}}'),o=JSON.parse('{"sw-product-bundle":{"general":{"mainMenuItemList":"Product bundles","mainMenuItemGeneral":"Product bundles","placeholderSearchBar":"Search bundles...","descriptionTextModule":"Manage bunldes here."},"list":{"textReviewOverview":"Product Bundle","columnProduct":"Product","columnPoints":"Stars","columnUser":"Customer","columnStatus":"Approved","columnCreatedAt":"Created at","columnComment":"Commented on","columnTitle":"Bundle title","columnName":"Name","placeholderSearchBar":"Search product bundles...","textProductBundles":"Product Bundles","messageEmpty":"No product bundles yet","messageEmptySubline":"Manage product bundles here","titleSidebarItemRefresh":"Refresh","buttonAddProperty":"Add Product bundle","textProperties":"Product Bundles","buttonAddBundle":"Add product bundle"},"detail":{"textHeadline":"Product Bundle","cardTitleReviewInfo":"Product Bundle","cardTitleReviewProperties":"Properties","labelTitle":"Title","labelPoints":"Points","labelUser":"User","labelSalesChannel":"Sales Channel","labelCreatedAt":"Created at","labelProduct":"Product","labelEmail":"Email address","labelLanguage":"Language","labelPositive":"Positive votes","labelNegative":"Negative votes","labelStatus":"Approved","labelContent":"Content","labelComment":"Comment","labelCustomer":"Customer","titleCardComment":"Comment","placeholderComment":"Enter comment...","review1PointRatingText":"Unsatisfactory","review2PointRatingText":"Acceptable","review3PointRatingText":"Good","review4PointRatingText":"Very good","review5PointRatingText":"Excellent"}},"sw-privileges":{"permissions":{"review":{"label":"Product Bundles"}}}}');Shopware.Module.register("product-bundle",{type:"plugin",name:"Product Bundle",title:"sw-product-bundle.general.mainMenuItemGeneral",description:"sw-property.general.descriptionTextModule",snippets:{"de-DE":a,"en-GB":o},routes:{list:{component:"product-bundle-list",path:"list"},detail:{component:"product-bundle-detail",path:"detail/:id",meta:{parentPath:"product.bundle.list"}},create:{component:"product-bundle-create",path:"create"}},navigation:[{label:"sw-product-bundle.general.mainMenuItemGeneral",color:"#ff3d58",path:"product.bundle.list",parent:"sw-catalogue"}]}),Shopware.Module.register("sw-new-tab-custom",{routeMiddleware(e,t){let n="sw.product.detail.custom";"sw.product.detail"===t.name&&t.children.every(e=>e.name!==n)&&t.children.push({name:n,path:"/sw/product/detail/:id/custom",component:"sw-product-detail-custom",meta:{parentPath:"sw.product.index"}}),e(t)}})}()})();