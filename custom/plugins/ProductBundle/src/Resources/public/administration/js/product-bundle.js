(function(){"use strict";var t={};t.p="bundles/productbundle/",window?.__sw__?.assetPath&&(t.p=window.__sw__.assetPath+"/bundles/productbundle/"),function(){let{Mixin:t}=Shopware,{Criteria:e}=Shopware.Data;Shopware.Component.register("product-bundle-list",{template:'<sw-page\n    class="sw-generic-custom-entity-list"\n>\n    <template #search-bar>\n        <sw-search-bar\n            key="product_bundle"\n            initial-search-type="product_bundle"\n            :initial-search="term"\n            @search="searchProductBundles"\n        />\n    </template>\n\n    <template #smart-bar-header>\n        <h2 class="sw-generic-custom-entity-list__title">\n            {{ $tc(\'sw-product-bundle.list.textProductBundles\') }}\n\n            <span v-if="!isLoading">\n                ({{ total }})\n            </span>\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button\n            class="sw-generic-custom-entity-list__button-add"\n            :router-link="{ name: \'product.bundle.create\' }"\n            variant="primary"\n        >\n            {{ $tc(\'global.default.add\') }}\n        </sw-button>\n    </template>\n\n    <template #language-switch>\n        <sw-language-switch @on-change="onChangeLanguage" />\n    </template>\n\n    <template #content>\n        <div class="sw-generic-custom-entity-list__content">\n             <sw-entity-listing\n                v-if="!isLoading"\n                class="sw-generic-custom-entity-list__content-list"\n                :repository="productBundleRepository"\n                :items="productBundles"\n                :columns="columns"\n                :is-loading="isLoading"\n                :allowEdit="true"\n\n            />\n            <sw-empty-state\n                v-else\n                class="sw-generic-custom-entity-list__content-empty-state"\n                :title="emptyStateTitle"\n                :subline="emptyStateSubline"\n            >\n                <template #actions>\n                    <sw-button\n                        @click="createNewBundle"\n                        variant="primary"\n                    >\n                        {{ $tc(\'sw-product-bundle.list.textCreateProductBundle\') }}\n                    </sw-button>\n                </template>\n            </sw-empty-state>\n        </div>\n    </template>\n</sw-page>\n',inject:["repositoryFactory"],mixins:[t.getByName("listing")],metaInfo(){return{title:this.$createTitle()}},data(){return{isLoading:!1,total:0,productBundles:[],criteria:new e(1,25),productBundleRepository:this.repositoryFactory.create("product_bundle"),languageId:Shopware.State.get("context").api.languageId,emptyStateTitle:this.$tc("sw-product-bundle.list.emptyStateTitle"),emptyStateSubline:this.$tc("sw-product-bundle.list.emptyStateSubline")}},computed:{columns(){return[{property:"name",label:this.$tc("sw-product-bundle.list.columnName"),routerLink:"product.bundle.detail",allowResize:!0}]}},methods:{async fetchProductBundles(){this.isLoading=!0,this.criteria.addAssociation("translations");try{let t=await this.productBundleRepository.search(this.criteria,Shopware.Context.api);this.productBundles=t,this.total=t.total}catch(t){console.error("Error fetching product bundles:",t.response?.data||t.message),this.productBundles=[]}finally{this.isLoading=!1}},async changeLanguage(){this.languageId=Shopware.State.get("context").api.languageId,await this.fetchProductBundles()},createNewBundle(){this.$router.push({name:"product.bundle.create"})},searchProductBundles(t){this.criteria.setTerm(t),this.fetchProductBundles()}},created(){this.fetchProductBundles()}});let{Mixin:n}=Shopware;Shopware.Component.register("product-bundle-detail",{template:'<sw-page\n    class="sw-generic-custom-entity-detail"\n>\n    <template #smart-bar-header>\n        <h2 class="sw-generic-custom-entity-detail__title">\n         {{ $tc(\'sw-product-bundle.list.textProductBundles\') }}\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button-process\n            class="sw-generic-custom-entity-detail__save-action"\n            :is-loading="isLoading"\n            :process-success="saveSuccess"\n            variant="primary"\n            :disabled="isLoading"\n            @update:process-success="saveFinish"\n            @click="saveProductBundle"\n        >\n            {{ $tc(\'global.default.save\') }}\n        </sw-button-process>\n        <template>\n            <sw-confirm-modal\n                v-if="showDeleteConfirmModal"\n                :text="$tc(\'sw-product-bundle.detail.deleteConfirmTitle\')"\n                type="delete"\n                @confirm="confirmDeleteProductBundle"\n                @cancel="showDeleteConfirmModal = false"\n                @close="showDeleteConfirmModal = false"\n            >\n                <p>{{ $tc(\'sw-product-bundle.detail.deleteConfirmMessage\') }}</p>\n            </sw-confirm-modal>\n\n            <sw-button variant="danger" @click="showDeleteModal">\n                {{ $tc(\'global.default.delete\') }}\n            </sw-button>\n        </template>\n\n    </template>\n\n    <template #language-switch>\n        <sw-language-switch @on-change="onChangeLanguage" />\n    </template>\n\n    <template #content>\n        <sw-card-view>\n            <sw-card :title="$tc(\'sw-product-bundle.detail.general\')">\n                <sw-text-field  v-model="productBundle.name"\n                    @update:value="productBundle.name = $event" label="Bundle Name" required  />\n            </sw-card>\n            <sw-card :title="$tc(\'sw-product-bundle.detail.products\')">\n                <div v-for="(product, index) in selectedProducts" :key="index" class="sw-product-bundle-product-row">\n                    <div class="sw-product-bundle-product-name">\n                        <span>{{ product.product.translated.name ?? \'N/A\' }}</span> \n                    </div>\n                    <div class="sw-product-bundle-product-quantity">\n                        <sw-number-field\n                            v-model="product.quantity"\n                            :min="1"\n                            :required="true"\n                        />\n                    </div>\n                    <div class="sw-product-bundle-product-delete">\n                        <sw-button\n                            variant="danger"\n                            @click="deleteProductFromBundle(product.productId)"\n                        >\n                            {{ $tc(\'global.default.delete\') }}\n                        </sw-button>\n                    </div>\n                </div>\n\n                <div class="sw-product-bundle-add-product">\n                   <sw-entity-single-select\n                        v-model="newProduct.productId"\n                        entity="product"\n                        :label="$tc(\'sw-product-bundle.detail.product\')"\n                        :required="true"\n                         @update:value="newProduct.productId = $event"\n                        />\n                    <sw-number-field\n                        v-model="newProduct.quantity"\n                        :label="$tc(\'sw-product-bundle.detail.quantity\')"\n                        :min="1"\n                        @update:value="newProduct.quantity = $event"\n                        :required="true"\n                    />\n                    <sw-button\n                        variant="primary"\n                        @click="addProductToBundle"\n                        :disabled="isProductInBundle(newProduct.productId)"\n                    >\n                        {{ $tc(\'global.default.add\') }}\n                    </sw-button>\n                </div>\n            </sw-card>\n\n        </sw-card-view>\n    </template>\n</sw-page>\n',inject:["repositoryFactory","context"],mixins:[n.getByName("notification")],data(){return{productBundleRepository:this.repositoryFactory.create("product_bundle"),productBundle:null,isLoading:!1,saveSuccess:!1,deleteError:!1,selectedProducts:[],newProduct:{productId:null,quantity:1},showDeleteConfirmModal:!1}},computed:{isProductInBundle(){return t=>this.selectedProducts.some(e=>e.productId===t)}},methods:{async loadProductBundle(){this.isLoading=!0;try{let t=new Shopware.Data.Criteria;t.addAssociation("translations"),t.addAssociation("assignedProducts.product"),t.addAssociation("assignedProducts.product.translations"),this.productBundle=await this.productBundleRepository.get(this.$route.params.id,Shopware.Context.api,t),this.selectedProducts=this.productBundle.assignedProducts.map(t=>({bundleId:t.bundleId,productId:t.product.id,product:t.product,quantity:t.quantity})),console.log("Product bundle:",this.productBundle)}catch(t){console.error("Error fetching product bundle:",t.response?.data||t.message),this.productBundle=null}finally{this.isLoading=!1}},async onChangeLanguage(){await this.loadProductBundle()},async saveProductBundle(){this.isLoading=!0;try{await this.productBundleRepository.save(this.productBundle,this.context),this.saveSuccess=!0,this.$router.push({name:"product.bundle.list"})}catch(t){console.error("Error saving product bundle:",t)}finally{this.isLoading=!1}},showDeleteModal(){this.showDeleteConfirmModal=!0},async confirmDeleteProductBundle(){this.isLoading=!0;try{await this.repositoryFactory.create("product_bundle").delete(this.productBundle.id,this.context),this.$router.push({name:"product.bundle.list"})}catch(t){console.error("Error deleting product bundle:",t)}finally{this.isLoading=!1,this.showDeleteConfirmModal=!1}},async addProductToBundle(){if(this.selectedProducts.find(t=>t.productId===this.newProduct.productId)){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productExistsError")});return}try{let t=this.repositoryFactory.create("product"),e=this.repositoryFactory.create("product_bundle_assigned_products");if(!await t.get(this.newProduct.productId,Shopware.Context.api)){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productNotFoundError")});return}let n=e.create(Shopware.Context.api);n.bundleId=this.productBundle.id,n.productId=this.newProduct.productId,n.quantity=this.newProduct.quantity,await e.save(n,Shopware.Context.api),this.newProduct.productId=null,this.newProduct.quantity=1,this.loadProductBundle()}catch(t){console.error("Error adding product to bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productAddError")})}},async deleteProductFromBundle(t){try{let e=this.repositoryFactory.create("product_bundle_assigned_products"),n=new Shopware.Data.Criteria;n.addFilter(Shopware.Data.Criteria.equals("productId",t)),n.addFilter(Shopware.Data.Criteria.equals("bundleId",this.productBundle.id));let r=await e.search(n,Shopware.Context.api);if(!r.length){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productNotFoundError")});return}for(let t of r)await e.delete(t.id,Shopware.Context.api);this.loadProductBundle()}catch(t){console.error("Error deleting product from bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productDeleteError")})}}},created(){this.loadProductBundle()},metaInfo(){return{title:this.$createTitle()}}});var r=Shopware;Shopware.Component.register("product-bundle-create",{template:'<sw-page\n    class="sw-generic-custom-entity-detail"\n>\n         <template #smart-bar-header>\n        <h2 class="sw-generic-custom-entity-detail__title">\n         {{ $tc(\'sw-product-bundle.list.textProductBundles\') }}\n        </h2>\n    </template>\n\n       <template #smart-bar-actions>\n        <sw-button-process\n            class="sw-generic-custom-entity-detail__save-action"\n            :is-loading="isLoading"\n            variant="primary"\n            :disabled="isLoading"\n            @click="createProductBundle"\n        >\n            {{ $tc(\'global.default.save\') }}\n        </sw-button-process>\n\n\n    </template>\n\n\n    <template #content>\n        <sw-card-view>\n            <sw-card :title="$tc(\'sw-product-bundle.detail.general\')">\n                <sw-text-field  v-model="productBundle.name" @update:value="productBundle.name = $event" label="Bundle Name" required  />\n            </sw-card>\n            <sw-card :title="$tc(\'sw-product-bundle.detail.products\')">\n                <div v-for="(product, index) in productBundle.assignedProducts" :key="index" class="sw-product-bundle-product-row">\n                    <div class="sw-product-bundle-product-name">\n                        <span>{{ product.productName ?? \'N/A\' }}</span> \n                    </div>\n                    <div class="sw-product-bundle-product-quantity">\n                        <sw-number-field\n                            v-model="product.quantity"\n                            :min="1"\n                            :required="true"\n                        />\n                    </div>\n                    <div class="sw-product-bundle-product-delete">\n                        <sw-button\n                            variant="danger"\n                            @click="deleteProductFromBundle(product.productId)"\n                        >\n                            {{ $tc(\'global.default.delete\') }}\n                        </sw-button>\n                    </div>\n                </div>\n\n                <div class="sw-product-bundle-add-product">\n                   <sw-entity-single-select\n                        v-model="newProduct.productId"\n                        entity="product"\n                        :label="$tc(\'sw-product-bundle.detail.product\')"\n                        :required="true"\n                         @update:value="newProduct.productId = $event"\n                        />\n                    <sw-number-field\n                        v-model="newProduct.quantity"\n                        :label="$tc(\'sw-product-bundle.detail.quantity\')"\n                        :min="1"\n                        @update:value="newProduct.quantity = $event"\n                        :required="true"\n                    />\n                    <sw-button\n                        variant="primary"\n                        @click="addProductToBundle"\n                        :disabled="isProductInBundle(newProduct.productId)"\n                    >\n                        {{ $tc(\'global.default.add\') }}\n                    </sw-button>\n                </div>\n            </sw-card>\n\n        </sw-card-view>\n    </template>\n    </sw-page>\n',inject:["repositoryFactory","context"],mixins:[r.Mixin.getByName("notification")],data(){return{productBundleRepository:this.repositoryFactory.create("product_bundle"),productBundle:{name:"",assignedProducts:[]},isLoading:!1,saveSuccess:!1,newProduct:{productId:null,quantity:1}}},computed:{isProductInBundle(){return t=>this.productBundle.assignedProducts.some(e=>e.productId===t)}},methods:{async createProductBundle(){this.isLoading=!0;try{let t=this.productBundleRepository.create(Shopware.Context.api);t.name=this.productBundle.name,t.assignedProducts=await Promise.all(this.productBundle.assignedProducts.map(async e=>{let n=this.repositoryFactory.create("product_bundle_assigned_products").create(Shopware.Context.api);return n.bundleId=t.id,n.productId=e.productId,n.quantity=e.quantity,n})),await this.productBundleRepository.save(t,Shopware.Context.api),this.saveSuccess=!0,this.$router.push({name:"product.bundle.list"})}catch(t){console.error("Error saving product bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.saveError")})}finally{this.isLoading=!1}},async addProductToBundle(){if(this.productBundle.assignedProducts.find(t=>t.productId===this.newProduct.productId)){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productExistsError")});return}try{let t=this.repositoryFactory.create("product"),e=await t.get(this.newProduct.productId,{...Shopware.Context.api,languageId:Shopware.Context.api.languageId});if(!e){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productNotFoundError")});return}console.log("productiiii:",e),this.productBundle.assignedProducts.push({productName:e.translated.name,productId:this.newProduct.productId,quantity:this.newProduct.quantity}),this.newProduct={productId:null,quantity:1}}catch(t){console.error("Error adding product to bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productAddError")})}},async deleteProductFromBundle(t){try{if(!this.productBundle.assignedProducts.filter(e=>e.productId===t).length){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productNotFoundError")});return}this.productBundle.assignedProducts=this.productBundle.assignedProducts.filter(e=>e.productId!==t)}catch(t){console.error("Error deleting product from bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productDeleteError")})}}},metaInfo(){return{title:this.$createTitle()}}});var d=JSON.parse('{"listing":{"boxLabelBundle":"Bundle"},"product-bundle":{"general":{"mainMenuItemGeneral":"My custom module","descriptionTextModule":"Manage this custom module here"}}}'),o=JSON.parse('{"listing":{"boxLabelBundle":"Bundle"},"sw-product-bundle":{"general":{"mainMenuItemList":"Product bundles","mainMenuItemGeneral":"Product bundles","placeholderSearchBar":"Search bundles...","descriptionTextModule":"Manage bunldes here."},"list":{"textReviewOverview":"Product Bundle","columnProduct":"Product","columnPoints":"Stars","columnUser":"Customer","columnStatus":"Approved","columnCreatedAt":"Created at","columnComment":"Commented on","columnTitle":"Bundle title","columnName":"Name","placeholderSearchBar":"Search product bundles...","textProductBundles":"Product Bundles","messageEmpty":"No product bundles yet","messageEmptySubline":"Manage product bundles here","titleSidebarItemRefresh":"Refresh","buttonAddProperty":"Add Product bundle","textProperties":"Product Bundles","buttonAddBundle":"Add product bundle","emptyStateTitle":"No product bundles yet","emptyStateSubline":"Manage product bundles here"},"detail":{"textHeadline":"Product Bundle","cardTitleReviewInfo":"Product Bundle","cardTitleReviewProperties":"Properties","labelTitle":"Title","labelPoints":"Points","labelUser":"User","labelSalesChannel":"Sales Channel","labelCreatedAt":"Created at","labelProduct":"Product","labelEmail":"Email address","labelLanguage":"Language","labelPositive":"Positive votes","labelNegative":"Negative votes","labelStatus":"Approved","labelContent":"Content","labelComment":"Comment","labelCustomer":"Customer","titleCardComment":"Comment","placeholderComment":"Enter comment...","review1PointRatingText":"Unsatisfactory","review2PointRatingText":"Acceptable","review3PointRatingText":"Good","review4PointRatingText":"Very good","review5PointRatingText":"Excellent","quantity":"Quantity","products":"Products","general":"Bundle","selectProductPlaceholder":"Select product","selectProduct":"Product","productExistsError":"This product is already in the bundle.","product":"Product","deleteConfirmTitle":"Delete Bundle?","deleteConfirmMessage":"Are you sure you want to delete this product bundle? This action cannot be undone."}},"sw-privileges":{"permissions":{"review":{"label":"Product Bundles"}}}}');Shopware.Module.register("product-bundle",{type:"plugin",name:"Product Bundle",title:"sw-product-bundle.general.mainMenuItemGeneral",description:"sw-property.general.descriptionTextModule",snippets:{"de-DE":d,"en-GB":o},routes:{list:{component:"product-bundle-list",path:"list"},detail:{component:"product-bundle-detail",path:"detail/:id",meta:{parentPath:"product.bundle.list"}},create:{component:"product-bundle-create",path:"create",meta:{parentPath:"product.bundle.list"}}},navigation:[{id:"product-bundle-plugin",label:"sw-product-bundle.general.mainMenuItemGeneral",color:"#ff3d58",path:"product.bundle.list",parent:"sw-catalogue",icon:"default-shopping-paper-bag-product",position:100}]})}()})();