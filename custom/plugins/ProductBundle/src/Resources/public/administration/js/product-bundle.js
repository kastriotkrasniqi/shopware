(function(){"use strict";var t={};t.p="bundles/productbundle/",window?.__sw__?.assetPath&&(t.p=window.__sw__.assetPath+"/bundles/productbundle/"),function(){let{Mixin:t}=Shopware,{Criteria:e}=Shopware.Data;Shopware.Component.register("product-bundle-list",{template:'<sw-page\n    class="sw-generic-custom-entity-list"\n>\n    <template #search-bar>\n        <sw-search-bar\n            key="product_bundle"\n            initial-search-type="product_bundle"\n            :initial-search="term"\n            @search="searchProductBundles"\n        />\n    </template>\n\n    <template #smart-bar-header>\n        <h2 class="sw-generic-custom-entity-list__title">\n            {{ $tc(\'sw-product-bundle.list.textProductBundles\') }}\n\n            <span v-if="!isLoading">\n                ({{ total }})\n            </span>\n        </h2>\n    </template>\n\n    <template #smart-bar-actions>\n        <sw-button\n            class="sw-generic-custom-entity-list__button-add"\n            :router-link="{ name: \'product.bundle.create\' }"\n            variant="primary"\n        >\n            {{ $tc(\'global.default.add\') }}\n        </sw-button>\n    </template>\n\n    <template #language-switch>\n        <sw-language-switch @on-change="onChangeLanguage" />\n    </template>\n\n    <template #content>\n        <div class="sw-generic-custom-entity-list__content">\n             <sw-entity-listing\n                v-if="!isLoading"\n                class="sw-generic-custom-entity-list__content-list"\n                :repository="productBundleRepository"\n                :items="productBundles"\n                :columns="columns"\n                :is-loading="isLoading"\n                :allowEdit="true"\n\n            />\n            <sw-empty-state\n                v-else\n                class="sw-generic-custom-entity-list__content-empty-state"\n                :title="emptyStateTitle"\n                :subline="emptyStateSubline"\n            >\n                <template #actions>\n                    <sw-button\n                        @click="createNewBundle"\n                        variant="primary"\n                    >\n                        {{ $tc(\'sw-product-bundle.list.textCreateProductBundle\') }}\n                    </sw-button>\n                </template>\n            </sw-empty-state>\n        </div>\n    </template>\n</sw-page>\n',inject:["repositoryFactory"],mixins:[t.getByName("listing")],metaInfo(){return{title:this.$createTitle()}},data(){return{isLoading:!1,total:0,productBundles:[],criteria:new e(1,25),productBundleRepository:this.repositoryFactory.create("product_bundle"),languageId:Shopware.State.get("context").api.languageId,emptyStateTitle:this.$tc("sw-product-bundle.list.emptyStateTitle"),emptyStateSubline:this.$tc("sw-product-bundle.list.emptyStateSubline")}},computed:{columns(){return[{property:"name",label:this.$tc("sw-product-bundle.list.columnName"),routerLink:"product.bundle.detail",allowResize:!0}]}},methods:{async fetchProductBundles(){this.isLoading=!0,this.criteria.addAssociation("translations");try{let t=await this.productBundleRepository.search(this.criteria,Shopware.Context.api);this.productBundles=t,this.total=t.total}catch(t){console.error("Error fetching product bundles:",t.response?.data||t.message),this.productBundles=[]}finally{this.isLoading=!1}},async changeLanguage(){this.languageId=Shopware.State.get("context").api.languageId,await this.fetchProductBundles()},createNewBundle(){this.$router.push({name:"product.bundle.create"})},searchProductBundles(t){this.criteria.setTerm(t),this.fetchProductBundles()}},created(){this.fetchProductBundles()}});let{Mixin:n}=Shopware;Shopware.Component.register("product-bundle-detail",{template:'<template>\n    <div class="sw-product-bundle-detail">\n        \n        <sw-page :title="productBundleName">\n            <template #smart-bar-actions>\n                <sw-button variant="primary" @click="saveProductBundle" :disabled="isLoading">\n                    {{ $tc(\'sw-product-bundle.detail.save\') }}\n                </sw-button>\n                <sw-button variant="danger" @click="showDeleteModal" :disabled="isLoading">\n                    {{ $tc(\'sw-product-bundle.detail.delete\') }}\n                </sw-button>\n            </template>\n\n            \n            <sw-loader v-if="isLoading" />\n\n            \n            <sw-card v-else title="{{ $tc(\'sw-product-bundle.detail.assignedProducts\') }}">\n                <template v-if="selectedProducts.length">\n                    <sw-data-grid :items="selectedProducts" :columns="columns">\n                        <template #actions="{ item }">\n                            <sw-button variant="danger" size="small" @click="removeProductFromBundle(item.productId)">\n                                {{ $tc(\'sw-product-bundle.detail.remove\') }}\n                            </sw-button>\n                        </template>\n                    </sw-data-grid>\n                </template>\n                <sw-alert v-else variant="info">\n                    {{ $tc(\'sw-product-bundle.detail.noProductsAssigned\') }}\n                </sw-alert>\n            </sw-card>\n\n            \n            <sw-card title="{{ $tc(\'sw-product-bundle.detail.addProduct\') }}">\n                <sw-container>\n                    <sw-entity-single-select\n                        v-model="newProduct.productId"\n                        :repository="productRepository"\n                        :label="$tc(\'sw-product-bundle.detail.selectProduct\')"\n                        entity="product"\n                        placeholder="Select a product"\n                    />\n\n                    <sw-number-field\n                        v-model="newProduct.quantity"\n                        :label="$tc(\'sw-product-bundle.detail.quantity\')"\n                        :min="1"\n                    />\n\n                    <sw-button variant="primary" @click="addProductToBundle" :disabled="!newProduct.productId">\n                        {{ $tc(\'sw-product-bundle.detail.add\') }}\n                    </sw-button>\n                </sw-container>\n            </sw-card>\n        </sw-page>\n\n        \n        <sw-modal v-if="showDeleteConfirmModal" variant="danger" @close="showDeleteConfirmModal = false">\n            <template #title>\n                {{ $tc(\'sw-product-bundle.detail.deleteConfirmTitle\') }}\n            </template>\n            <template #content>\n                {{ $tc(\'sw-product-bundle.detail.deleteConfirmMessage\') }}\n            </template>\n            <template #footer>\n                <sw-button variant="danger" @click="deleteProductBundle">\n                    {{ $tc(\'sw-product-bundle.detail.confirmDelete\') }}\n                </sw-button>\n                <sw-button @click="showDeleteConfirmModal = false">\n                    {{ $tc(\'sw-product-bundle.detail.cancel\') }}\n                </sw-button>\n            </template>\n        </sw-modal>\n    </div>\n</template>\n',inject:["repositoryFactory","context"],mixins:[n.getByName("notification")],data(){return{productBundleRepository:this.repositoryFactory.create("product_bundle"),assignedProductRepository:this.repositoryFactory.create("product_bundle_assigned_products"),productRepository:this.repositoryFactory.create("product"),productBundle:null,selectedProducts:[],newProduct:{productId:null,quantity:1},isLoading:!1,isSaveSuccessful:!1,showDeleteConfirmModal:!1}},computed:{productBundleName(){return this.productBundle?.name??""},isProductInBundle(){return t=>this.selectedProducts.some(e=>e.productId===t)}},methods:{async fetchProductBundle(){this.isLoading=!0;try{let t=new Shopware.Data.Criteria;t.addAssociation("translations").addAssociation("assignedProducts.product").addAssociation("assignedProducts.product.translations"),this.productBundle=await this.productBundleRepository.get(this.$route.params.id,Shopware.Context.api,t),this.selectedProducts=this.productBundle.assignedProducts.map(t=>({bundleId:t.bundleId,productId:t.product.id,product:t.product,quantity:t.quantity})),console.log("Product bundle loaded:",this.productBundle)}catch(t){console.error("Error fetching product bundle:",t.response?.data||t.message),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.loadError")}),this.productBundle=null}finally{this.isLoading=!1}},async saveProductBundle(){this.isLoading=!0;try{await this.productBundleRepository.save(this.productBundle,this.context),this.isSaveSuccessful=!0,this.$router.push({name:"product.bundle.list"})}catch(t){console.error("Error saving product bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.saveError")})}finally{this.isLoading=!1}},async deleteProductBundle(){this.isLoading=!0;try{await this.productBundleRepository.delete(this.productBundle.id,this.context),this.$router.push({name:"product.bundle.list"})}catch(t){console.error("Error deleting product bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.deleteError")})}finally{this.isLoading=!1,this.showDeleteConfirmModal=!1}},showDeleteModal(){this.showDeleteConfirmModal=!0},async addProductToBundle(){if(!this.newProduct.productId){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.selectProductError")});return}if(this.isProductInBundle(this.newProduct.productId)){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productExistsError")});return}try{if(!await this.productRepository.get(this.newProduct.productId,Shopware.Context.api)){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productNotFoundError")});return}let t=this.assignedProductRepository.create(Shopware.Context.api);Object.assign(t,{bundleId:this.productBundle.id,productId:this.newProduct.productId,quantity:this.newProduct.quantity}),await this.assignedProductRepository.save(t,Shopware.Context.api),this.resetNewProduct(),this.fetchProductBundle()}catch(t){console.error("Error adding product to bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productAddError")})}},async removeProductFromBundle(t){try{let e=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("productId",t)).addFilter(Shopware.Data.Criteria.equals("bundleId",this.productBundle.id)),n=await this.assignedProductRepository.search(e,Shopware.Context.api);if(!n.length){this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productNotFoundError")});return}for(let t of n)await this.assignedProductRepository.delete(t.id,Shopware.Context.api);this.fetchProductBundle()}catch(t){console.error("Error deleting product from bundle:",t),this.createNotificationError({message:this.$tc("sw-product-bundle.detail.productDeleteError")})}},resetNewProduct(){this.newProduct={productId:null,quantity:1}},async onChangeLanguage(){await this.fetchProductBundle()}},created(){this.fetchProductBundle()},metaInfo(){return{title:this.$createTitle()}}});let{Mixin:r}=Shopware,{Criteria:o}=Shopware.Data;Shopware.Component.register("product-bundle-create",{template:'{% block sw_product_bundle_create_form %}\n<div class="product-bundle-create-form">\n    \n    <sw-inherit-wrapper\n        v-model:value="productBundle.translations[languageId].name"\n        :has-parent="!!parentProduct.id"\n        :inherited-value="getInheritValue(\'translations\', \'name\')"\n    >\n        <template #content="props">\n            <sw-text-field\n                :map-inheritance="props"\n                :value="props.currentValue"\n                :disabled="props.isInherited || !allowEdit"\n                :label="$tc(\'sw-product-bundle.create.labelTitle\')"\n                :required="isTitleRequired"\n                name="sw-field--bundle-name"\n                :error="productBundleNameError"\n                @update:value="props.updateCurrentValue"\n            />\n        </template>\n    </sw-inherit-wrapper>\n\n    \n    <sw-data-grid\n        :columns="columns"\n        :dataSource="availableProducts"\n        :selectionMode="\'multiple\'"\n        v-model:selection="selectedProducts"\n        :rowKey="product => product.id"\n    >\n        <template #column-actions="{ item }">\n            <sw-button\n                variant="danger"\n                @click="removeProductFromBundle(item)"\n                icon="default-action-delete"\n            >\n                {{ $tc(\'sw-product-bundle.create.removeProduct\') }}\n            </sw-button>\n        </template>\n    </sw-data-grid>\n\n    \n    <div class="product-bundle-create-form__buttons">\n        <sw-button\n            variant="primary"\n            :disabled="saveDisabled"\n            @click="saveBundle"\n        >\n            {{ $tc(\'sw-product-bundle.create.saveButton\') }}\n        </sw-button>\n        <sw-button\n            variant="default"\n            @click="cancel"\n        >\n            {{ $tc(\'sw-product-bundle.create.cancelButton\') }}\n        </sw-button>\n    </div>\n</div>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[r.getByName("listing")],data(){return{productBundleRepository:this.repositoryFactory.create("product_bundle"),productBundle:null,languageId:Shopware.State.get("context").api.languageId,availableProducts:[],selectedProducts:[],columns:[{property:"name",label:this.$tc("sw-product-bundle.create.productColumnName"),align:"left"},{property:"quantity",label:this.$tc("sw-product-bundle.create.productColumnQuantity"),align:"center"},{property:"actions",label:this.$tc("sw-product-bundle.create.actionsColumn"),align:"center"}],isLoading:!1,saveDisabled:!1,productBundleNameError:null}},computed:{saveDisabled(){return!this.productBundle||this.isLoading||!this.selectedProducts.length}},methods:{async createNewBundle(){this.isLoading=!0;try{this.productBundle=this.productBundleRepository.create(Shopware.Context.api),this.productBundle.translations=this.productBundle.translations||{},this.$set(this.productBundle.translations,this.languageId,{name:""}),await this.fetchAvailableProducts()}catch(t){console.error("Error creating bundle:",t)}finally{this.isLoading=!1}},async fetchAvailableProducts(){let t=new o(1,25),e=await this.productBundleRepository.search(t,Shopware.Context.api);this.availableProducts=e},addProductToBundle(t){this.selectedProducts.includes(t)||this.selectedProducts.push(t)},removeProductFromBundle(t){let e=this.selectedProducts.indexOf(t);-1!==e&&this.selectedProducts.splice(e,1)},async saveBundle(){this.isLoading=!0;try{this.productBundle.products=this.selectedProducts.map(t=>({productId:t.id,quantity:1})),await this.productBundleRepository.save(this.productBundle,Shopware.Context.api),this.$router.push({name:"product.bundle.list"})}catch(t){console.error("Error saving bundle:",t)}finally{this.isLoading=!1}},cancel(){this.$router.push({name:"product.bundle.list"})}},created(){this.createNewBundle()}});var a=JSON.parse('{"product-bundle":{"general":{"mainMenuItemGeneral":"My custom module","descriptionTextModule":"Manage this custom module here"}}}'),d=JSON.parse('{"sw-product-bundle":{"general":{"mainMenuItemList":"Product bundles","mainMenuItemGeneral":"Product bundles","placeholderSearchBar":"Search bundles...","descriptionTextModule":"Manage bunldes here."},"list":{"textReviewOverview":"Product Bundle","columnProduct":"Product","columnPoints":"Stars","columnUser":"Customer","columnStatus":"Approved","columnCreatedAt":"Created at","columnComment":"Commented on","columnTitle":"Bundle title","columnName":"Name","placeholderSearchBar":"Search product bundles...","textProductBundles":"Product Bundles","messageEmpty":"No product bundles yet","messageEmptySubline":"Manage product bundles here","titleSidebarItemRefresh":"Refresh","buttonAddProperty":"Add Product bundle","textProperties":"Product Bundles","buttonAddBundle":"Add product bundle","emptyStateTitle":"No product bundles yet","emptyStateSubline":"Manage product bundles here"},"detail":{"textHeadline":"Product Bundle","cardTitleReviewInfo":"Product Bundle","cardTitleReviewProperties":"Properties","labelTitle":"Title","labelPoints":"Points","labelUser":"User","labelSalesChannel":"Sales Channel","labelCreatedAt":"Created at","labelProduct":"Product","labelEmail":"Email address","labelLanguage":"Language","labelPositive":"Positive votes","labelNegative":"Negative votes","labelStatus":"Approved","labelContent":"Content","labelComment":"Comment","labelCustomer":"Customer","titleCardComment":"Comment","placeholderComment":"Enter comment...","review1PointRatingText":"Unsatisfactory","review2PointRatingText":"Acceptable","review3PointRatingText":"Good","review4PointRatingText":"Very good","review5PointRatingText":"Excellent","quantity":"Quantity","products":"Products","general":"Bundle","selectProductPlaceholder":"Select product","selectProduct":"Product","productExistsError":"This product is already in the bundle.","product":"Product","deleteConfirmTitle":"Delete Bundle?","deleteConfirmMessage":"Are you sure you want to delete this product bundle? This action cannot be undone."}},"sw-privileges":{"permissions":{"review":{"label":"Product Bundles"}}}}');Shopware.Module.register("product-bundle",{type:"plugin",name:"Product Bundle",title:"sw-product-bundle.general.mainMenuItemGeneral",description:"sw-property.general.descriptionTextModule",snippets:{"de-DE":a,"en-GB":d},routes:{list:{component:"product-bundle-list",path:"list"},detail:{component:"product-bundle-detail",path:"detail/:id",meta:{parentPath:"product.bundle.list"}},create:{component:"product-bundle-create",path:"create",meta:{parentPath:"product.bundle.list"}}},navigation:[{id:"product-bundle-plugin",label:"sw-product-bundle.general.mainMenuItemGeneral",color:"#ff3d58",path:"product.bundle.list",parent:"sw-catalogue",icon:"default-shopping-paper-bag-product",position:100}]})}()})();